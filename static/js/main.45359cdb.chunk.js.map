{"version":3,"sources":["Components/CardList/CardList.component.js","Components/Card/Card.component.js","Components/Search/Search.component.js","App.js","reportWebVitals.js","index.js"],"names":["CardList","props","className","children","Card","robot","src","id","name","email","Search","changeText","type","placeholder","onChange","e","target","value","App","setState","searchText","state","robots","fetch","then","response","json","data","filterdSearch","this","filter","toLowerCase","includes","map","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAUeA,EARA,SAACC,GAChB,OACI,qBAAKC,UAAU,YAAf,SACKD,EAAME,YCOAC,G,MAVJ,SAAC,GAAW,IAAVC,EAAS,EAATA,MACX,OACI,sBAAKH,UAAU,iBAAf,UACG,qBAAKI,IAAG,+BAA0BD,EAAME,GAAhC,4BACR,4BAAIF,EAAMG,OACV,4BAAIH,EAAMI,aCGJC,G,MARF,SAAC,GAAgB,IAAfC,EAAc,EAAdA,WAEX,OACI,qBAAKT,UAAU,SAAf,SACE,uBAAQU,KAAK,SAASC,YAAY,yBAAyBC,SAAU,SAACC,GAAD,OAAKJ,EAAWI,EAAEC,OAAOC,cC4BzFC,E,kDA3BX,aAAc,IAAD,8BACX,gBAOFP,WAAW,SAACH,GACV,EAAKW,SAAS,CAACC,WAAWZ,KAP1B,EAAKa,MAAM,CAACC,OAAO,GAAGF,WAAW,IAFtB,E,qDAIb,WAAoB,IAAD,OAClBG,MAAM,8CAA8CC,MAAK,SAAAC,GAAQ,OAAEA,EAASC,UAC3EF,MAAK,SAAAG,GAAI,OAAE,EAAKR,SAAS,CAACG,OAAOK,S,oBAKrC,WAAS,IAAD,OAEFC,EAAsC,IAAvBC,KAAKR,MAAMD,WAAZ,YAAgCS,KAAKR,MAAMC,QAAQO,KAAKR,MAAMC,OAAOQ,QAAO,SAAAzB,GAAK,OAAEA,EAAMG,KAAKuB,cAAcC,SAAS,EAAKX,MAAMD,WAAWW,kBAC7J,OACE,gCACE,oBAAI7B,UAAU,QAAd,6BACA,cAAC,EAAD,CAAQS,WAAYkB,KAAKlB,aACzB,cAAC,EAAD,UAECiB,EAAcK,KAAI,SAAA5B,GAAK,OAAE,cAAC,EAAD,CAAqBA,MAAOA,GAAjBA,EAAME,gB,GAtBjC2B,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.45359cdb.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './CardList.styles.css'\r\nconst CardList=(props)=>{\r\nreturn (\r\n    <div className=\"card-list\">\r\n        {props.children}\r\n\r\n    </div>\r\n)\r\n}\r\nexport default CardList","import React from \"react\";\r\nimport   \"./Card.styles.css\";\r\nconst Card=({robot})=>{\r\n  return(\r\n      <div className=\"card-container\"> \r\n         <img src={`https://robohash.org/${robot.id}?set=set2&size=200x200`}/>\r\n         <p>{robot.name}</p>\r\n         <p>{robot.email}</p>\r\n      </div>\r\n  )\r\n\r\n}\r\nexport default Card","import React from 'react'\r\nimport './Search.styles.css'\r\nconst Search=({changeText})=>{\r\n\r\n    return(\r\n        <div className=\"search\" >\r\n          <input  type=\"search\" placeholder=\"search monster here...\" onChange={(e)=>changeText(e.target.value)}/>\r\n        </div>\r\n    )\r\n}\r\nexport default Search","import './App.css';\nimport React, { Component } from 'react'\nimport CardList from \"./Components/CardList/CardList.component\";\nimport Card from './Components/Card/Card.component'\nimport Search from \"./Components/Search/Search.component\";\nclass App extends Component{\n\n    constructor(){\n      super()\n      this.state={robots:[],searchText:\"\"}\n    }\n    componentDidMount(){\n     fetch(\"https://jsonplaceholder.typicode.com/users\").then(response=>response.json())\n     .then(data=>this.setState({robots:data}))\n    }\n    changeText=(name)=>{\n      this.setState({searchText:name})\n     }\n  render(){\n   \n    let filterdSearch=(this.state.searchText=='')?[...this.state.robots]:this.state.robots.filter(robot=>robot.name.toLowerCase().includes(this.state.searchText.toLowerCase()))  \n    return(\n      <div>\n        <h1 className=\"title\">Monster Robotox</h1>\n        <Search changeText={this.changeText} />\n        <CardList>\n        {\n         filterdSearch.map(robot=><Card key={robot.id} robot={robot}/>)\n        }\n        </CardList>\n      </div>\n    )\n  }\n}\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}